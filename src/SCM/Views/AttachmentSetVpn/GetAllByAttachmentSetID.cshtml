@model IEnumerable<SCM.Models.ViewModels.VpnViewModel>

@{
    ViewData["Title"] = "VPNs";
}

<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/Home">Home</a></li>
    <li class="breadcrumb-item"><a href="/Tenant/GetAll">Tenants</a></li>
    <li class="breadcrumb-item"><a href="/AttachmentSet/GetAllByTenantID/@ViewBag.AttachmentSet.TenantID">Attachment Sets - [@ViewBag.AttachmentSet.Tenant.Name]</a></li>
    <li class="breadcrumb-item active">VPNs - [@ViewBag.AttachmentSet.Name]</li>
</ol>

<div id="successMessage" class="alert alert-success">@Html.Raw(ViewData["SuccessMessage"])</div>
<div id="errorMessage" class="alert alert-danger">@Html.Raw(ViewData["ErrorMessage"])</div>

<h2>VPNs for Attachment Set '@ViewBag.AttachmentSet.Name'</h2>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Plane)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Region)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VpnTenancyType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VpnTopologyType.VpnProtocolType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VpnTopologyType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tenant)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RequiresSync)
            </th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr id="@item.VpnID">
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Plane.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Region.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VpnTenancyType.TenancyType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VpnTopologyType.VpnProtocolType.ProtocolType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VpnTopologyType.TopologyType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Tenant.Name)
            </td>
            <td id="requiresSync_@item.VpnID">
                @Html.DisplayFor(modelItem => item.RequiresSync)
            </td>
            <td class="row-spinner spinner-element" id="syncStatus_@item.VpnID">
            </td>
            <td>
                @Html.ActionLink("Details", "Details", new { VpnID = item.VpnID, AttachmentSetID = ViewBag.AttachmentSet.AttachmentSetID } )
            </td>
        </tr>
}
    </tbody>
</table>
<input type="hidden" name="AttachmentSetID" id="AttachmentSetID" value="@ViewBag.AttachmentSet.AttachmentSetID" />
<input type="submit" id="CheckSync" asp-action="CheckSyncAllByAttachmentSetID" value="Check Sync All" class="btn btn-default" /> |
<input type="submit" id="Sync" asp-action="SyncAllByAttachmentSetID" value="Sync All" class="btn btn-default" /> |
<a asp-action="GetAllByTenantID" asp-controller="AttachmentSet" asp-route-id="@ViewBag.AttachmentSet.TenantID">Back to Attachment Sets</a>

@section Scripts {

    <script type="text/javascript">

        (function ($) {

            var $successMessage = $('#successMessage');
            var $errorMessage = $('#errorMessage');
            var $attachmentSetID = $('#AttachmentSetID');
            var attachmentSetVal = $attachmentSetID[0].value;

            var onConnectionSuccess = function (vpnHub) {

                // Join the hub group for the current Attachment Set

                vpnHub.server.joinGroup('AttachmentSet_' + attachmentSetVal);

                var $sync = $('#Sync');
                var $checkSync = $('#CheckSync');

                handleButtonClick($sync, '/AttachmentSetVpn/SyncAllByAttachmentSetID');
                handleButtonClick($checkSync, '/AttachmentSetVpn/CheckSyncAllByAttachmentSetID');
            };

            main();

            function main() {

                initMessaging();
                initHub();
            };

            function initMessaging() {

                if ($successMessage.html().length == 0) {
                    $successMessage.hide();
                }

                if ($errorMessage.html().length == 0) {
                    $errorMessage.hide();
                }
            };

            function initHub() {

                // Reference the auto-generated proxy for the hub.

                var vpnHub = $.connection.vpnHub;

                // Start the connection.

                $.connection.hub.start()
                    .done(function() {
                        onConnectionSuccess(vpnHub)
                    })
                    .fail(function () {
                        showErrorMessage("Failed to establish a connection to the server.");
                    });

                // Create a method that the hub calls when processing of all VPNs is complete

                vpnHub.client.onAllComplete = function (message, success) {

                    // Enable submit buttons

                    $('.btn').prop('disabled', false);

                    if (success) {
                        showSuccessMessage(message);
                    }
                    else {
                        showErrorMessage(message);
                    }
                };

                // Create a method that the hub calls when processing of a single vpn has completed

                vpnHub.client.onSingleComplete = function (vpn, success) {

                    var $syncStatus = $('#syncStatus_' + vpn.VpnID);

                    // Set requiresSync checkbox state

                    $('#requiresSync_' + vpn.VpnID + ' > input').prop('checked', !success);

                    $syncStatus.data('spinner').stop();

                    if (success) {
                        $syncStatus.text('Success');
                    }
                    else {
                        $syncStatus.text('Error - check logs');
                    }
                }
            };

            function handleButtonClick($button, url) {

                $button.on('click', function (e) {

                    // Prevent double-click

                    $('.btn').prop('disabled', true);

                    var $spinnerElems = $(".row-spinner");
                    $spinnerElems.each(function () {

                        var $this = $(this);
                        $this.empty();

                        var spinnerOpts = {
                            lines: 13,
                            length: 28,
                            width: 14,
                            radius: 42,
                            scale: 0.15
                        };

                        var spinner = new Spinner(spinnerOpts).spin(this);
                        $this.data('spinner', spinner);
                    });

                    // Call the server

                    $.ajax({
                        url: url,
                        method: 'POST',
                        data: { id: attachmentSetVal }
                    });
                });
            };

            function showSuccessMessage(message) {

                $successMessage.html(message).show();
                $errorMessage.empty().hide();
            };

            function showErrorMessage(message) {

                $errorMessage.html(message).show();
                $successMessage.empty().hide();
            };

        }(jQuery));

    </script>
}
